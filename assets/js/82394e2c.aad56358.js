"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[96415],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=l(t),g=r,m=p["".concat(c,".").concat(g)]||p[g]||u[g]||i;return t?a.createElement(m,s(s({ref:n},d),{},{components:t})):a.createElement(m,s({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},73009:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),s=["components"],o={sidebar_position:19,sidebar_label:"AMPLab Big Data Benchmark"},c="AMPLab Big Data Benchmark",l={unversionedId:"zh/getting-started/example-datasets/amplab-benchmark",id:"zh/getting-started/example-datasets/amplab-benchmark",title:"AMPLab Big Data Benchmark",description:"amplab-big-data-benchmark}",source:"@site/docs/zh/getting-started/example-datasets/amplab-benchmark.md",sourceDirName:"zh/getting-started/example-datasets",slug:"/zh/getting-started/example-datasets/amplab-benchmark",permalink:"/docs/zh/getting-started/example-datasets/amplab-benchmark",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/zh/getting-started/example-datasets/amplab-benchmark.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19,sidebar_label:"AMPLab Big Data Benchmark"},sidebar:"chinese",previous:{title:"Terabyte Click Logs from Criteo",permalink:"/docs/zh/getting-started/example-datasets/criteo"},next:{title:"New York Taxi Data",permalink:"/docs/zh/getting-started/example-datasets/nyc-taxi"}},d={},u=[],p={toc:u};function g(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"amplab-big-data-benchmark"},"AMPLab Big Data Benchmark"),(0,i.kt)("p",null,"\u53c2\u8003 ",(0,i.kt)("a",{parentName:"p",href:"https://amplab.cs.berkeley.edu/benchmark/"},"https://amplab.cs.berkeley.edu/benchmark/")),(0,i.kt)("p",null,"\u9700\u8981\u60a8\u5728",(0,i.kt)("a",{parentName:"p",href:"https://aws.amazon.com"},"Amazon"),"\u6ce8\u518c\u4e00\u4e2a\u514d\u8d39\u7684\u8d26\u53f7\u3002\u6ce8\u518c\u65f6\u9700\u8981\u60a8\u63d0\u4f9b\u4fe1\u7528\u5361\u3001\u90ae\u7bb1\u3001\u7535\u8bdd\u7b49\u4fe1\u606f\u3002\u4e4b\u540e\u53ef\u4ee5\u5728",(0,i.kt)("a",{parentName:"p",href:"https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential"},"Amazon AWS Console"),"\u83b7\u53d6\u65b0\u7684\u8bbf\u95ee\u5bc6\u94a5"),(0,i.kt)("p",null,"\u5728\u63a7\u5236\u53f0\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install s3cmd\n$ mkdir tiny; cd tiny;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/tiny/ .\n$ cd ..\n$ mkdir 1node; cd 1node;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/1node/ .\n$ cd ..\n$ mkdir 5nodes; cd 5nodes;\n$ s3cmd sync s3://big-data-benchmark/pavlo/text-deflate/5nodes/ .\n$ cd ..\n")),(0,i.kt)("p",null,"\u5728ClickHouse\u8fd0\u884c\u5982\u4e0b\u67e5\u8be2\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE rankings_tiny\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_tiny\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n\nCREATE TABLE rankings_1node\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_1node\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n\nCREATE TABLE rankings_5nodes_on_single\n(\n    pageURL String,\n    pageRank UInt32,\n    avgDuration UInt32\n) ENGINE = Log;\n\nCREATE TABLE uservisits_5nodes_on_single\n(\n    sourceIP String,\n    destinationURL String,\n    visitDate Date,\n    adRevenue Float32,\n    UserAgent String,\n    cCode FixedString(3),\n    lCode FixedString(6),\n    searchWord String,\n    duration UInt32\n) ENGINE = MergeTree(visitDate, visitDate, 8192);\n")),(0,i.kt)("p",null,"\u56de\u5230\u63a7\u5236\u53f0\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ for i in tiny/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_tiny FORMAT CSV"; done\n$ for i in tiny/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_tiny FORMAT CSV"; done\n$ for i in 1node/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_1node FORMAT CSV"; done\n$ for i in 1node/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_1node FORMAT CSV"; done\n$ for i in 5nodes/rankings/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO rankings_5nodes_on_single FORMAT CSV"; done\n$ for i in 5nodes/uservisits/*.deflate; do echo $i; zlib-flate -uncompress < $i | clickhouse-client --host=example-perftest01j --query="INSERT INTO uservisits_5nodes_on_single FORMAT CSV"; done\n')),(0,i.kt)("p",null,"\u7b80\u5355\u7684\u67e5\u8be2\u793a\u4f8b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT pageURL, pageRank FROM rankings_1node WHERE pageRank > 1000\n\nSELECT substring(sourceIP, 1, 8), sum(adRevenue) FROM uservisits_1node GROUP BY substring(sourceIP, 1, 8)\n\nSELECT\n    sourceIP,\n    sum(adRevenue) AS totalRevenue,\n    avg(pageRank) AS pageRank\nFROM rankings_1node ALL INNER JOIN\n(\n    SELECT\n        sourceIP,\n        destinationURL AS pageURL,\n        adRevenue\n    FROM uservisits_1node\n    WHERE (visitDate > '1980-01-01') AND (visitDate < '1980-04-01')\n) USING pageURL\nGROUP BY sourceIP\nORDER BY totalRevenue DESC\nLIMIT 1\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting_started/example_datasets/amplab_benchmark/"},"\u539f\u59cb\u6587\u7ae0")," "))}g.isMDXComponent=!0}}]);