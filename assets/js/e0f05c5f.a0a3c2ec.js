"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[99741],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=d(t),m=i,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(b,s(s({ref:n},l),{},{components:t})):r.createElement(b,s({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},35033:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return u}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),s=["components"],a={sidebar_label:"Seeds",sidebar_position:7,description:"Using seeds with the dbt ClickHouse plugin"},c="Using Seeds",d={unversionedId:"en/integrations/dbt/dbt-seeds",id:"en/integrations/dbt/dbt-seeds",title:"Using Seeds",description:"Using seeds with the dbt ClickHouse plugin",source:"@site/docs/en/integrations/dbt/dbt-seeds.md",sourceDirName:"en/integrations/dbt",slug:"/en/integrations/dbt/dbt-seeds",permalink:"/docs/en/integrations/dbt/dbt-seeds",editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/dbt/dbt-seeds.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"Seeds",sidebar_position:7,description:"Using seeds with the dbt ClickHouse plugin"},sidebar:"english",previous:{title:"Incremental Materializations",permalink:"/docs/en/integrations/dbt/dbt-incremental-model"},next:{title:"Limitations",permalink:"/docs/en/integrations/dbt/dbt-limitations"}},l={},u=[],p={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-seeds"},"Using Seeds"),(0,o.kt)("p",null,"dbt provides the ability to load data from CSV files. This capability is not suited to loading large exports of a database and is more designed for small files typically used for code tables and ",(0,o.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/dictionaries/"},"dictionaries"),", e.g. mapping country codes to country names. For a simple example, we generate and then upload a list of genre codes using the seed functionality."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We generate a list of genre codes from our existing dataset. From the dbt directory, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-client")," to create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"seeds/genre_codes.csv"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'clickhouse-user@clickhouse:~/imdb$ clickhouse-client --password <password> --query\n"SELECT genre, ucase(substring(genre, 1, 3)) as code FROM imdb.genres GROUP BY genre\nLIMIT 100 FORMAT CSVWithNames" > seeds/genre_codes.csv\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"dbt seed")," command. This will create a new table ",(0,o.kt)("inlineCode",{parentName:"p"},"genre_codes")," in our database ",(0,o.kt)("inlineCode",{parentName:"p"},"imdb_dbt")," (as defined by our schema configuration) with the rows from our csv file."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-user@clickhouse:~/imdb$ dbt seed\n17:03:23  Running with dbt=1.0.4\n17:03:23  Found 1 model, 0 tests, 1 snapshot, 0 analyses, 181 macros, 0 operations, 1 seed file, 6 sources, 0 exposures, 0 metrics\n17:03:23\n17:03:24  Concurrency: 1 threads (target='dev')\n17:03:24\n17:03:24  1 of 1 START seed file imdb_dbt.genre_codes..................................... [RUN]\n17:03:24  1 of 1 OK loaded seed file imdb_dbt.genre_codes................................. [INSERT 21 in 0.65s]\n17:03:24\n17:03:24  Finished running 1 seed in 1.62s.\n17:03:24\n17:03:24  Completed successfully\n17:03:24\n17:03:24  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Confirm these have been loaded:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM imdb_dbt.genre_codes LIMIT 10;\n")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"+-------+----+\n|genre  |code|\n+-------+----+\n|Drama  |DRA |\n|Romance|ROM |\n|Short  |SHO |\n|Mystery|MYS |\n|Adult  |ADU |\n|Family |FAM |\n\n|Action |ACT |\n|Sci-Fi |SCI |\n|Horror |HOR |\n|War    |WAR |\n+-------+----+=\n")))))}m.isMDXComponent=!0}}]);