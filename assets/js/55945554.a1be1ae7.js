"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[7308],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(n),p=r,b=u["".concat(l,".").concat(p)]||u[p]||d[p]||i;return n?a.createElement(b,o(o({ref:t},c),{},{components:n})):a.createElement(b,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22794:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={sidebar_label:"View Materializations",sidebar_position:4,description:"View materializations with dbt and ClickHouse"},l="Creating a Simple View Materialization",m={unversionedId:"en/integrations/dbt/dbt-view-model",id:"en/integrations/dbt/dbt-view-model",title:"Creating a Simple View Materialization",description:"View materializations with dbt and ClickHouse",source:"@site/docs/en/integrations/dbt/dbt-view-model.md",sourceDirName:"en/integrations/dbt",slug:"/en/integrations/dbt/dbt-view-model",permalink:"/docs/en/integrations/dbt/dbt-view-model",editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/dbt/dbt-view-model.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"View Materializations",sidebar_position:4,description:"View materializations with dbt and ClickHouse"},sidebar:"english",previous:{title:"Connecting to ClickHouse",permalink:"/docs/en/integrations/dbt/dbt-connecting"},next:{title:"Table Materializations",permalink:"/docs/en/integrations/dbt/dbt-table-model"}},c={},d=[],u={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-simple-view-materialization"},"Creating a Simple View Materialization"),(0,i.kt)("p",null,"When using the view materialization, a model is rebuilt as a view on each run, via a ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE VIEW AS")," statement in ClickHouse. This doesn't require any additional storage of data but will be slower to query than table materializations."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"From the ",(0,i.kt)("inlineCode",{parentName:"p"},"imdb")," folder, delete the directory ",(0,i.kt)("inlineCode",{parentName:"p"},"models/example"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-user@clickhouse:~/imdb$ rm -rf models/example\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"actors")," within the ",(0,i.kt)("inlineCode",{parentName:"p"},"models")," folder. Here we create files that each represent an actor model:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-user@clickhouse:~/imdb$ mkdir models/actors\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the files ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.yml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_summary.sql")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"models/actors")," folder. Add the following contents:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-user@clickhouse:~/imdb$ touch models/actors/actor_summary.sql\nclickhouse-user@clickhouse:~/imdb$ touch models/actors/schema.yml\n")),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.yml")," defines our tables. These will subsequently be available for use in macros."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"version: 2\n\nsources:\n- name: imdb\ntables:\n- name: directors\n- name: actors\n- name: roles\n- name: movies\n- name: genres\n- name: movie_directors\n")),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"actors_summary.sql")," defines our actual model. Note in the config function we also request the model be materialized as a view in ClickHouse. Our tables are referenced from the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.yml")," file via the function ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"source('imdb', 'movies')")," refers to the ",(0,i.kt)("inlineCode",{parentName:"p"},"movies")," table in the ",(0,i.kt)("inlineCode",{parentName:"p"},"imdb")," database."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"{{ config(materialized='view') }}\n\nwith actor_summary as (\nSELECT id,\n    any(actor_name) as name,\n    uniqExact(movie_id)    as num_movies,\n    avg(rank)                as avg_rank,\n    uniqExact(genre)         as genres,\n    uniqExact(director_name) as directors,\n    max(created_at) as updated_at\nFROM (\n        SELECT {{ source('imdb', 'actors') }}.id as id,\n                concat({{ source('imdb', 'actors') }}.first_name, ' ', {{ source('imdb', 'actors') }}.last_name) as actor_name,\n                {{ source('imdb', 'movies') }}.id as movie_id,\n                {{ source('imdb', 'movies') }}.rank as rank,\n                genre,\n                concat({{ source('imdb', 'directors') }}.first_name, ' ', {{ source('imdb', 'directors') }}.last_name) as director_name,\n                created_at\n        FROM {{ source('imdb', 'actors') }}\n                    JOIN {{ source('imdb', 'roles') }} ON {{ source('imdb', 'roles') }}.actor_id = {{ source('imdb', 'actors') }}.id\n                    LEFT OUTER JOIN {{ source('imdb', 'movies') }} ON {{ source('imdb', 'movies') }}.id = {{ source('imdb', 'roles') }}.movie_id\n                    LEFT OUTER JOIN {{ source('imdb', 'genres') }} ON {{ source('imdb', 'genres') }}.movie_id = {{ source('imdb', 'movies') }}.id\n                    LEFT OUTER JOIN {{ source('imdb', 'movie_directors') }} ON {{ source('imdb', 'movie_directors') }}.movie_id = {{ source('imdb', 'movies') }}.id\n                    LEFT OUTER JOIN {{ source('imdb', 'directors') }} ON {{ source('imdb', 'directors') }}.id = {{ source('imdb', 'movie_directors') }}.director_id\n        )\nGROUP BY id\n)\n\nselect *\nfrom actor_summary\n")),(0,i.kt)("p",{parentName:"li"},"Note how we include the column ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at")," in our final actor_summary. We use this later for incremental materializations.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"From the ",(0,i.kt)("inlineCode",{parentName:"p"},"imdb")," directory execute the command ",(0,i.kt)("inlineCode",{parentName:"p"},"dbt run"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-user@clickhouse:~/imdb$ dbt run\n15:05:35  Running with dbt=1.0.4\n15:05:35  Found 1 model, 0 tests, 1 snapshot, 0 analyses, 181 macros, 0 operations, 0 seed files, 6 sources, 0 exposures, 0 metrics\n15:05:35\n15:05:36  Concurrency: 1 threads (target='dev')\n15:05:36\n15:05:36  1 of 1 START view model imdb_dbt.actor_summary.................................. [RUN]\n15:05:37  1 of 1 OK created view model imdb_dbt.actor_summary............................. [OK in 1.00s]\n15:05:37\n15:05:37  Finished running 1 view model in 1.97s.\n15:05:37\n15:05:37  Completed successfully\n15:05:37\n15:05:37  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"dbt will represent the model as a view in ClickHouse as requested. We can now query this view directly. This view will have been created in the ",(0,i.kt)("inlineCode",{parentName:"p"},"imdb_dbt")," database - this is determined by the schema parameter in the file ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.dbt/profiles.yml")," under the ",(0,i.kt)("inlineCode",{parentName:"p"},"clickhouse_imdb")," profile."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-response"},"+------------------+\n|name              |\n+------------------+\n|INFORMATION_SCHEMA|\n|default           |\n|imdb              |\n|imdb_dbt          |  <---created by dbt!\n|information_schema|\n|system            |\n+------------------+\n")),(0,i.kt)("p",{parentName:"li"},"Querying this view, we can replicate the results of our earlier query with a simpler syntax:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM imdb_dbt.actor_summary ORDER BY num_movies DESC LIMIT 5;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-response"},"+------+------------+----------+------------------+------+---------+-------------------+\n|id    |name        |num_movies|avg_rank          |genres|directors|updated_at         |\n+------+------------+----------+------------------+------+---------+-------------------+\n|45332 |Mel Blanc   |832       |6.175853582979779 |18    |84       |2022-04-26 15:26:55|\n|621468|Bess Flowers|659       |5.57727638854796  |19    |293      |2022-04-26 15:26:57|\n|372839|Lee Phelps  |527       |5.032976449684617 |18    |261      |2022-04-26 15:26:56|\n|283127|Tom London  |525       |2.8721716524875673|17    |203      |2022-04-26 15:26:56|\n|356804|Bud Osborne |515       |2.0389507108727773|15    |149      |2022-04-26 15:26:56|\n+------+------------+----------+------------------+------+---------+-------------------+\n")))))}p.isMDXComponent=!0}}]);